services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: midkey-postgres
    environment:
      POSTGRES_DB: midkey_production
      POSTGRES_USER: midkey
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U midkey"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: midkey-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: midkey-keycloak
    command: start --optimized
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/midkey_production
      KC_DB_USERNAME: midkey
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Proof Server
  proof-server:
    build:
      context: ./proof-server
      dockerfile: Dockerfile
    container_name: midkey-proof-server
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://midkey:${POSTGRES_PASSWORD}@postgres:5432/midkey_production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      SECRET_KEY: ${SECRET_KEY}
      LACE_WALLET_ADDRESS: ${LACE_WALLET_ADDRESS}
      LACE_WALLET_PRIVATE_KEY: ${LACE_WALLET_PRIVATE_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_BASE_URL: ${API_BASE_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: info
      SENTRY_DSN: ${SENTRY_DSN}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: midkey-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_BASE_URL}
      NEXT_PUBLIC_KEYCLOAK_URL: ${KEYCLOAK_URL}
      NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
    ports:
      - "3000:3000"
    depends_on:
      - keycloak
      - proof-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: midkey-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - proof-server
      - keycloak
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: midkey-network
